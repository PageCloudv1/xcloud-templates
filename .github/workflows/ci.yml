name: 📋 xCloud Templates - Validation & Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  validate-templates:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 🟢 Setup Node.js  
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 📦 Install validation tools
      run: |
        pip install pyyaml jsonschema cookiecutter
        npm install -g @apidevtools/json-schema-ref-parser

    - name: ✅ Validate template structure
      run: |
        python -c "
        import os
        import yaml
        import json
        
        template_dirs = [d for d in os.listdir('.') if os.path.isdir(d) and d.startswith('template-')]
        
        for template_dir in template_dirs:
            print(f'🔍 Validating {template_dir}...')
            
            # Check cookiecutter.json
            config_file = os.path.join(template_dir, 'cookiecutter.json')
            if os.path.exists(config_file):
                with open(config_file, 'r') as f:
                    config = json.load(f)
                    print(f'  ✅ cookiecutter.json is valid')
            else:
                print(f'  ⚠️ cookiecutter.json not found')
            
            # Check template structure
            template_content = os.path.join(template_dir, '{{cookiecutter.project_name}}')
            if os.path.exists(template_content):
                print(f'  ✅ Template content structure exists')
            else:
                print(f'  ❌ Template content structure missing')
        "

    - name: 🧪 Test template generation
      run: |
        # Test each template with default values
        for template_dir in template-*/; do
          if [ -d "$template_dir" ]; then
            echo "🚀 Testing template generation for $template_dir"
            
            # Create test config with default values
            echo '{
              "project_name": "test-project",
              "author_name": "Test Author",
              "author_email": "test@example.com",
              "description": "Test project description"
            }' > test-config.json
            
            # Generate template
            cookiecutter --no-input --config-file test-config.json "$template_dir" || echo "⚠️ Template generation needs adjustment"
            
            # Clean up
            rm -rf test-project/ || true
            rm test-config.json
          fi
        done

  test-samples:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        template: [
          "template-fastapi-service",
          "template-nextjs-app", 
          "template-python-function",
          "template-nodejs-function",
          "template-react-component"
        ]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 📦 Install cookiecutter
      run: |
        pip install cookiecutter

    - name: "🎯 Test template: ${{ matrix.template }}"
      run: |
        if [ -d "${{ matrix.template }}" ]; then
          echo "🧪 Testing ${{ matrix.template }}"
          
          # Create test values
          echo '{
            "project_name": "sample-project",
            "project_slug": "sample_project", 
            "author_name": "GitHub Actions",
            "author_email": "actions@github.com",
            "description": "Generated by CI/CD test",
            "version": "0.1.0"
          }' > test-values.json
          
          # Generate project
          cookiecutter --no-input --config-file test-values.json "${{ matrix.template }}"
          
          cd sample-project/
          
          # Test based on template type
          case "${{ matrix.template }}" in
            *fastapi*)
              pip install -r requirements.txt || echo "No requirements.txt"
              python -c "import main; print('✅ FastAPI template OK')" || echo "⚠️ FastAPI template needs fixes"
              ;;
            *nextjs*|*react*)
              npm install || echo "No package.json"
              npm run build || echo "⚠️ Build failed"
              ;;
            *python*)
              pip install -r requirements.txt || echo "No requirements.txt"  
              python -m pytest || python -c "print('✅ Python template OK')"
              ;;
            *nodejs*)
              npm install || echo "No package.json"
              npm test || echo "⚠️ Tests need implementation"
              ;;
          esac
        else
          echo "⚠️ Template ${{ matrix.template }} not found, skipping"
        fi
      shell: bash

  validate-documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📚 Validate README files
      run: |
        # Check each template has proper documentation
        for template_dir in template-*/; do
          if [ -d "$template_dir" ]; then
            echo "📖 Checking documentation for $template_dir"
            
            readme_file="$template_dir/README.md"
            if [ -f "$readme_file" ]; then
              echo "  ✅ README.md exists"
              
              # Check required sections
              required_sections=("Usage" "Features" "Installation" "Configuration")
              for section in "${required_sections[@]}"; do
                if grep -q "## $section\|# $section" "$readme_file"; then
                  echo "  ✅ Section '$section' found"
                else
                  echo "  ⚠️ Section '$section' missing"
                fi
              done
            else
              echo "  ❌ README.md missing"
            fi
            
            # Check for example files
            examples_dir="$template_dir/examples"
            if [ -d "$examples_dir" ]; then
              echo "  ✅ Examples directory exists"
            else
              echo "  ⚠️ Examples directory missing"
            fi
          fi
        done

    - name: 🔗 Check template links
      run: |
        # Verify all links in template READMEs work
        find . -name "README.md" -path "*/template-*" -exec echo "🔍 Checking links in {}" \; \
        -exec grep -oP 'https?://[^\s\)]+' {} \; | while read url; do
          if [ -n "$url" ]; then
            curl -Is "$url" | head -n 1 | grep -q "200\|301\|302" && echo "✅ $url" || echo "❌ $url"
          fi
        done || echo "⚠️ Link checking needs improvement"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔒 Scan templates for secrets
      run: |
        # Look for hardcoded secrets or sensitive data in templates
        echo "🔍 Scanning for potential secrets..."
        
        # Common patterns to avoid in templates
        patterns=(
          "password.*=.*['\"][^'\"]*['\"]"
          "secret.*=.*['\"][^'\"]*['\"]"
          "api_key.*=.*['\"][^'\"]*['\"]"
          "token.*=.*['\"][^'\"]*['\"]"
        )
        
        found_issues=false
        for pattern in "${patterns[@]}"; do
          results=$(grep -r -i -E "$pattern" template-*/ || true)
          if [ -n "$results" ]; then
            echo "⚠️ Potential secret found: $pattern"
            echo "$results"
            found_issues=true
          fi
        done
        
        if [ "$found_issues" = false ]; then
          echo "✅ No hardcoded secrets found"
        else
          echo "❌ Please review potential secrets in templates"
          exit 1
        fi

  package-templates:
    needs: [validate-templates, test-samples, validate-documentation]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Package templates
      run: |
        mkdir -p dist/
        
        for template_dir in template-*/; do
          if [ -d "$template_dir" ]; then
            template_name=$(basename "$template_dir")
            echo "📦 Packaging $template_name..."
            
            tar -czf "dist/${template_name}.tar.gz" "$template_dir"
            echo "✅ Created dist/${template_name}.tar.gz"
          fi
        done

    - name: 📊 Generate template catalog
      run: |
        echo "# xCloud Template Catalog" > dist/catalog.md
        echo "" >> dist/catalog.md
        echo "Generated on: $(date)" >> dist/catalog.md
        echo "" >> dist/catalog.md
        
        for template_dir in template-*/; do
          if [ -d "$template_dir" ]; then
            template_name=$(basename "$template_dir")
            echo "## $template_name" >> dist/catalog.md
            
            # Extract description from cookiecutter.json or README
            if [ -f "$template_dir/cookiecutter.json" ]; then
              desc=$(grep -oP '"description":\s*"\K[^"]*' "$template_dir/cookiecutter.json" || echo "No description")
              echo "Description: $desc" >> dist/catalog.md
            fi
            
            echo "Archive: ${template_name}.tar.gz" >> dist/catalog.md
            echo "" >> dist/catalog.md
          fi
        done

    - name: 📤 Upload template packages
      uses: actions/upload-artifact@v3
      with:
        name: xcloud-templates
        path: dist/
        retention-days: 90

    - name: 🚀 Deploy to GitHub Releases
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 📢 Notify packaging completion
      run: |
        echo "🎉 Template packaging completed!"
        echo "📊 Templates packaged: $(ls -1 dist/*.tar.gz | wc -l)"
        ls -la dist/